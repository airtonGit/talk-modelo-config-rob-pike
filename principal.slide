# Modelo de configuração de 1 ano de experimentos de Rob Pike: Functional Options
19 Janeiro 2021

Airton F S Oliveira
Especialista em Engenharia de Software, Tempest
airton.oliveira@tempest.com


## Rob Pike 

- Um dos criadores da linguagem GO
- Além da linguagem em si também apresenta soluções inovadoras adotadas pela indústria
- Criou os Provérbios de GO alguns:
  + Faça do valor zero útil
  + Uma pequena cópia é melhor que uma pequena dependência
  + Concorrência não é Paralelismo
  + Claro é melhor que esperto


## Desafio: como configurar structs, services que podem ter dezenas de configurações?

* Assinatura de funções de criação `New...` (_constructor_) com muitos parâmetros
* Ao ser necessário evoluir o código novos paramêtros precisam ser adicionados 
ou criar novas funções `New` (_constructor_)
* Novos parâmetros nas funções quebra os utilizadores obrigando a uma versão major X.0.0
* Utilizar serviços que precisam de muitos paramêtros gera uma complexidade maior para uma parte dos 
utilizadores que não precisam de todo o universo de configurações possíveis.

## Exemplo simples: como configurar uma casa, opções podem ser as cores das paredes, quantidade de quartos 
quantidade de banheiros, material das paredes, piso e do telhado. Entre muitos outras possibilidades que já
previstas e muitas outras que ainda virão no futuro...

Começa simples v1:

.code /v1/casa_v1.go /^func NewCasa/,/^}/

Com o tempo e novas 'funcionalidades' na v2:

.code /v2/casa_v2.go /^func NewCasa/,/^}/


## Solução:

Configuração com a passagem de **funções** de 
configuração em **assinatura variádica**, também conhecido como:
_Functional Options_

* Função New (_constructor_) recebe parâmetros (essênciais)
* Função Configure recebe 1 ou mais options

: Método Configurar tem acesso privado e empresta a option func a referência do objeto
: assim a mesma pode setar os parâmetros

.code /v3/casa_v3.go /^type option/,/^$/

.code /v3/casa_v3.go /^func.*Configurar/,/^}/

## Opções em forma de funções

Para ofertar opções de configuração em forma de parâmetros são disponibilizadas
funções de configuração

Opção simples

.code /v3/casa_v3.go /^func opParedeAzul/,/^}/

Opção com parâmetro

.code /v3/casa_v3.go /^func opQuantidadeQuartos/,/^}/

: Este exemplo está redundante apenas para demonstrar como seria a utilização

## Conclusão

A utilização deste modelo de configuração mantém retro-compatibilidade em versões novas.
Simplicidade de utilização nos cenários mais comuns com menos customização.
Mantém checagem estática do código na identificação de falhas de programação.

.code /v3/casa_v3.go /^type option/,/^$/
.code /v3/casa_v3.go /^func.*Configurar/,/^}/
.code /v3/casa_v3.go /^func opQuantidadeQuartos/,/^}/
.code /v3/casa_v3.go /^//HL10START/,/^//HL10END/ HL10

## Obrigado

Referências:

+ https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html
+ https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis
